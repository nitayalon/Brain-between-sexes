grid$Var1 == 0.8 && round(grid$Var1,2) == 0.7
grid$Var1 == 0.8 && round(grid$Var1,2) == 0.71
grid$Var1 == 0.8 && round(grid$Var2,2) == 0.71
grid$Var2
round(grid$Var2,2) == 0.71
grid$Var1 == 0.8 & round(grid$Var2,2) == 0.71
plot(G_x[[86]]$x, G_x[[86]]$density)
points(G_x[[86]]$x, G_x[[86]]$y, col = "blue")
plot(G_x[[86]]$x, G_x[[86]]$density)
lines(density(rlaplace(10000)), col = "red")
points(G_x[[86]]$x, G_x[[86]]$y, col  ="blue")
View(computeMLEOverGridIteratively)
View(iterativeMLEComputationOverGrid)
View(nonConstrainedEM)
View(computeProbabilityMatrix)
plot(G_x[[11]]$x, G_x[[11]]$density)
points(G_x[[11]]$x, G_x[[11]]$y, col  ="blue")
lines(density(rlaplace(10000)), col = "red")
plot(G_x[[110]]$x, G_x[[110]]$density)
points(G_x[[110]]$x, G_x[[110]]$y, col  ="blue")
lines(density(rlaplace(10000)), col = "red")
grid$Var1 == 0.8 & round(grid$Var2,2) == 0.71
grid$Var1 == 0.8 & round(grid$Var2,2) == 0.61
plot(G_x[[75]]$x, G_x[[75]]$density)
points(G_x[[75]]$x, G_x[[75]]$y, col  ="blue")
lines(density(rlaplace(10000)), col = "red")
plot(G_x[[75]]$x, G_x[[75]]$density)
points(G_x[[86]]$x, G_x[[86]]$density, col  ="blue")
lines(density(rlaplace(10000)), col = "red")
p <- plot_ly(x = G_x[[86]]$x,
y = G_x[[86]]$density,
type = "points")
p
p <- plot_ly(x = G_x[[86]]$x,
y = G_x[[86]]$density,
type = "scatter")
p
lines(density(rlaplace(10000)), col = "red")
sum(G_x[[86]]$density)
sum(G_x[[75]]$density)
sum(G_x[[86]]$density * G_x[[86]]$normalize_factor)
sum(G_x[[75]]$density * G_x[[75]]$normalize_factor)
View(computeCentralDistribution)
source('~/mastersdegree/Thesis/Main/Code/run_full_script.R', echo=TRUE)
debug(computeBandEmpiricalDensity)
main(sigma = 1, epsilon = 0.49, p = 2/3, type = "laplace")
p <- plot_ly(x = grid$Var1,
y = grid$Var1,
z = b,
type = "contour")
p
debug(computeBandEmpiricalDensity)
main(sigma = 1, epsilon = 0.9, p = 2/3, type = "laplace")
p <- plot_ly(x = grid$Var1,
y = grid$Var1,
z = b,
type = "contour")
p
grid$Var1 == 0.9 & round(grid$Var2,2) == 0.61
plot(G_x[[76]]$x, G_x[[76]]$density)
lines(density(rlaplace(10000)), col = "red")
grid$Var1 == 0.9 & round(grid$Var2,2) == 0.71
plot(G_x[[87]]$x, G_x[[87]]$density, col  ="blue")
lines(density(rlaplace(10000)), col = "red")
G_x[[87]]$x
discrete_density
debug(main)
main(sigma = 1, epsilon = 0.8, p = 2/3, type = "laplace")
seq(min(observations), max(observations), length.out = 200)
seq(min(observations), max(observations), length.out = 100)
source('~/mastersdegree/Thesis/Main/Code/estimate_b/method_helper_function.R', echo=TRUE)
source('~/mastersdegree/Thesis/Main/Code/run_full_script.R', echo=TRUE)
undebug(main)
debug(computeBandEmpiricalDensity)
main(sigma = 1, epsilon = 0.9, p = 2/3, type = "laplace")
grid$Var1 == 0.9 & round(grid$Var2,2) == 0.71
plot(G_x[[76]]$x, G_x[[76]]$density)
lines(density(rlaplace(10000)), col = "red")
plot(G_x[[87]]$x, G_x[[87]]$density, col  ="blue")
lines(density(rlaplace(10000)), col = "red")
debug(computeBandEmpiricalDensity)
main(sigma = 1, epsilon = 0.9, p = 2/3, type = "laplace")
p <- plot_ly(x = grid$Var1,
y = grid$Var1,
z = b,
type = "contour")
p
grid$Var1 == 0.9 & round(grid$Var2,2) == 0.71
b[grid$Var1 == 0.9 & round(grid$Var2,2) == 0.71]
plot(G_x[[87]]$x, G_x[[87]]$density, col  ="blue")
lines(density(rlaplace(10000)), col = "red")
plot(G_x[[76]]$x, G_x[[76]]$density)
lines(density(rlaplace(10000)), col = "red")
plot(G_x[[11]]$x, G_x[[11]]$density, col  ="blue")
lines(density(rlaplace(10000)), col = "red")
plot(G_x[[110]]$x, G_x[[110]]$density, col  ="blue")
lines(density(rlaplace(10000)), col = "red")
plot(G_x[[1]]$x, G_x[[1]]$density, col  ="blue")
lines(density(rlaplace(10000)), col = "red")
plot(density(rlaplace(10000)), col = "red")
points(G_x[[76]]$x, G_x[[76]]$density, col = 1)
plot(G_x[[87]]$x, G_x[[87]]$density, col = 2)
plot(density(rlaplace(10000)), col = "red")
points(G_x[[76]]$x, G_x[[76]]$density, col = 1)
points(G_x[[87]]$x, G_x[[87]]$density, col = 2)
plot(density(rlaplace(10000)), col = "red")
plot(density(rlaplace(10000)), col = "red")
points(G_x[[76]]$x, G_x[[76]]$density, col = 1)
points(G_x[[87]]$x, G_x[[87]]$density, col = 3)
plot(G_x[[110]]$x, G_x[[110]]$density, col = 4)
plot(density(rlaplace(10000)), col = "red")
points(G_x[[76]]$x, G_x[[76]]$density, col = 1)
points(G_x[[87]]$x, G_x[[87]]$density, col = 3)
points(G_x[[110]]$x, G_x[[110]]$density, col = 4)
points(G_x[[11]]$x, G_x[[11]]$density, col = 5)
points(G_x[[1]]$x, G_x[[1]]$density, col = 6)
plot(density(rlaplace(10000)), col = "red")
points(G_x[[76]]$x, G_x[[76]]$density, col = 1)
points(G_x[[87]]$x, G_x[[87]]$density, col = 3)
plot(density(rlaplace(10000)), col = "red")
points(G_x[[110]]$x, G_x[[110]]$density, col = 4)
plot(density(rlaplace(10000)), col = "red")
points(G_x[[11]]$x, G_x[[11]]$density, col = 5)
points(G_x[[1]]$x, G_x[[1]]$density, col = 6)
sum(G_x[[1]]$density * G_x[[1]]$normalize_factor)
sum(G_x[[1]]$density)
G_x[[1]]$x > -0.001 & G_x[[1]]$x < 0.001
G_x[[1]]$x > -0.01 & G_x[[1]]$x < 0.01
G_x[[1]]$x
G_x[[1]]$x > -0.01 & G_x[[1]]$x < 0.1
G_x[[1]]$density[G_x[[1]]$x > -0.01 & G_x[[1]]$x < 0.1]
dlaplace(0)
G_x[[1]]$density[G_x[[1]]$x > -0.01 & G_x[[1]]$x < 0.1] * 2
G_x[[1]]$density[198]
G_x[[87]]$density[198]
G_x[[87]]$x[198]
dlaplace(G_x[[87]]$x[198])
G_x[[87]]$x
G_x[[87]]$density[109]
dlaplace(G_x[[87]]$x[109])
computeMLEOverGridIteratively
View(computeMLEOverGridIteratively)
View(iterativeMLEComputationOverGrid)
View(computeBandEmpiricalDensity)
View(nonConstrainedEM)
computeProbabilityMatrix
computeLLKoverGrid <- function(sigma, epsilon, p , type = "normal", n = 10000, convergance_level = 0.01){
#### Generate Data
theta <- epsilon *  sigma
HMM_parameters <- list(sigma = sigma, theta = theta, p = p, type = type,
sample_size = n)
init_probs <- c(p/2, 1-p, p/2)
obs <- createObservations(n, init_probs,probs_matrix_params = c(0.1,0.05,0),
parameters_for_distribution = data.frame(mu = c(-theta,0,theta), sigma = rep(sigma,3)),
conditional_distribution_type = type)
observations <- obs$observations
hist_breaks <- seq(min(observations), max(observations), length.out = 200)
f_x <- discritizeEmpiricalDist(observations,hist_breaks)
emp_density_res <- computeBandEmpiricalDensity(f_x)
lallprobs <- computeProbabilityMatrix(observation,number_of_hidden_states, theta,p,b, empirical_density) %>% t()
}
undebug(computeBandEmpiricalDensity)
debug(computeLLKoverGrid)
computeLLKoverGrid(sigma = 1, epsilon = 0.8, p = 2/3, type = "laplace")
computeProbabilityMatrix
Viw(computeBandEmpiricalDensity)
Veiw(computeBandEmpiricalDensity)
View(computeBandEmpiricalDensity)
View(empDensity)
emp_density_res[1]
split(grid, row(grid))
names(emp_density_res)
nrow(emp_density_res$grid)
i = 1
emp_density_res$grid$Var1[i]
emp_density_res$grid$Var2[i]
emp_density_res$b[i]
emp_density_res$G_x[[i]]
for(i in 1:nrow(emp_density_res$grid)){
browser()
lallprobs <-
computeProbabilityMatrix(observation,number_of_hidden_states,
emp_density_res$grid$Var1[i],
emp_density_res$grid$Var2[i],
emp_density_res$b[i],
emp_density_res$G_x[[i]])
}
i = 1
computeLLKoverGrid <- function(sigma, epsilon, p , type = "normal", n = 10000, convergance_level = 0.01){
#### Generate Data
theta <- epsilon *  sigma
HMM_parameters <- list(sigma = sigma, theta = theta, p = p, type = type,
sample_size = n)
init_probs <- c(p/2, 1-p, p/2)
obs <- createObservations(n, init_probs,probs_matrix_params = c(0.1,0.05,0),
parameters_for_distribution = data.frame(mu = c(-theta,0,theta), sigma = rep(sigma,3)),
conditional_distribution_type = type)
observations <- obs$observations
hist_breaks <- seq(min(observations), max(observations), length.out = 200)
f_x <- discritizeEmpiricalDist(observations,hist_breaks)
emp_density_res <- computeBandEmpiricalDensity(f_x)
for(i in 1:nrow(emp_density_res$grid)){
browser()
lallprobs <-
computeProbabilityMatrix(observation,number_of_hidden_states,
emp_density_res$grid$Var1[i],
emp_density_res$grid$Var2[i],
emp_density_res$b[i],
emp_density_res$G_x[[i]])
}
}
undebug(computeLLKoverGrid)
computeLLKoverGrid(sigma = 1, epsilon = 0.8, p = 2/3, type = "laplace")
source('~/.active-rstudio-document', echo=TRUE)
computeLLKoverGrid(sigma = 1, epsilon = 0.8, p = 2/3, type = "laplace")
View(lallprobs)
lallprobs[1,]
lallprobs[,1]
debug(computeProbabilityMatrix)
empirical_density
lallprobs[,1]
observations[1]
lallprobs[,101]
observations[101]
max(observation)
max(observations)
which.max(observations)
lallprobs[,7108]
exp(lallprobs[,7108])
undebug(computeProbabilityMatrix)
i = 76
plot(observations, lallprobs)
plot(observations[1], lallprobs[,1])
lallprobs[,1]
observations[1]
plot(observations[2], lallprobs[,2])
plot(observations[2], lallprobs[,2])
observations[2], lallprobs[,2]
observations[2]
lallprobs[,2]
plot(observations[1], lallprobs[,1][1])
points(observations[1], lallprobs[,1][2])
points(observations[1], lallprobs[,1][3])
plot(observations[1], lallprobs[,1][1], col = 1)
points(observations[1], lallprobs[,1][2], col = 2)
points(observations[1], lallprobs[,1][3], col = 3)
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
lallprobs[,j][2]
lallprobs[,j][3]
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
lallprobs[,j][3], col = 3
lallprobs[,j][3]
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
lallprobs[,j][1]
lallprobs[,j][2]
lallprobs[,j][3]
j <- sample(1:10000, 1)
observations[j]
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
j <- sample(1:10000, 1)
observations[j]
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
j <- sample(1:10000, 1)
plot(observations[j], lallprobs[,j][1], col = 1)
points(observations[j], lallprobs[,j][2], col = 2)
points(observations[j], lallprobs[,j][3], col = 3)
rm(list = ls())
source('~/mastersdegree/Thesis/DAPHNA_JOEL/Mixture_models/gaussian_mixture_model_v10.R', echo=TRUE)
#' This is the first trail of testing the EM and llk method on Dafi's data:
library(data.table)
source("~/MastersDegree/Thesis/DAPHNA_JOEL/Mixture_models/source_script.R")
source("~/mastersdegree/Thesis/DAPHNA_JOEL/Mixture_models/source_script.R")
source("~/mastersdegree/Thesis/DAPHNA_JOEL/Mixture_models/source_script.R")
source("~/mastersdegree/Thesis/DAPHNA_JOEL/Mixture_models/source_script.R")
setwd("~/MastersDegree/Thesis/DAPHNA_JOEL/Data/")
getwd
getwd()
setwd("~/mastersdegree/Thesis/DAPHNA_JOEL/Data/")
source("~/mastersdegree/Thesis/DAPHNA_JOEL/Mixture_models/source_script.R")
file.exists("~/mastersdegree/Thesis/DAPHNA_JOEL/Mixture_models/source_script.R")
source("~/mastersdegree/Thesis/DAPHNA_JOEL/Mixture_models/source_script.R")
source("compute_log_likelihood_for_normal.R")
source("~/mastersdegree/Thesis/DAPHNA_JOEL/Mixture_models/compute_log_likelihood_for_normal.R")
source("~/mastersdegree/Thesis/DAPHNA_JOEL/Mixture_models/gaussian_mixture_model_v10.R")
source("~/mastersdegree/Thesis/DAPHNA_JOEL/Mixture_models/compute_log_likelihood_for_data.R")
computeLogLikelihood <- function(men,women,theta_mas, theta_fem, p, q, sigma_2){
men_llk <- sum(log(p * dnorm(men, theta_fem, sqrt(sigma_2), log = F) +
(1 - p) * dnorm(men, theta_mas, sqrt(sigma_2), log = F)))
women_llk <- sum(log((1-q) * dnorm(women, theta_mas, sqrt(sigma_2), log = F) +
q * dnorm(women, theta_fem, sqrt(sigma_2), log = F)))
return(men_llk + women_llk)
}
source('~/mastersdegree/Thesis/DAPHNA_JOEL/Mixture_models/compute_log_likelihood_for_data.R', echo=TRUE)
source('~/mastersdegree/Thesis/DAPHNA_JOEL/Mixture_models/gaussian_mixture_model_v10.R', echo=TRUE)
runLikelihoodComputation
computeParametersAndLogLikelihoodRatioPerFeature <- function(feature, men_ind, women_ind){
men <- feature[men_ind,]
women <- feature[women_ind,]
mixture_probabilities_and_llk_ratio <- runLikelihoodComputation(men,women,n,m, plot = F)
return(mixture_probabilities_and_llk_ratio)
}
source('~/mastersdegree/Thesis/DAPHNA_JOEL/Mixture_models/compute_loglikelihood_and_mixture_params_per_feature.R', echo=TRUE)
debug(main)
main("data_GSP_thickness.csv")
main <- function(data_file){
path_to_file <- file.path("~/mastersdegree/Thesis/DAPHNA_JOEL/Data/", data_file)
dat <- read.csv(path_to_file)
features <- names(dat)
men_ind <- dat[dat$Gender == 1,]
women_ind <- dat[dat$Gender == 2,]
n <- length(men)
m <- length(women)
results <- data.frame(feature = NULL, p = NULL, q = NULL, llk_ratio = NULL)
names(results) <- c("feature", "p", "q")
for(feature in features){
feature_results <- computeParametersAndLogLikelihoodRatioPerFeature(dat[feature,],
men_ind,
women_ind)
}
write.csv(results, "~/MastersDegree/Thesis/DAPHNA_JOEL/Results/EM_Results/data_GSP_thickness_results.csv")
}
debug(main)
main("data_GSP_thickness.csv")
main <- function(data_file){
path_to_file <- file.path("~/mastersdegree/Thesis/DAPHNA_JOEL/Data", data_file)
dat <- read.csv(path_to_file)
features <- names(dat)
men_ind <- dat[dat$Gender == 1,]
women_ind <- dat[dat$Gender == 2,]
n <- length(men)
m <- length(women)
results <- data.frame(feature = NULL, p = NULL, q = NULL, llk_ratio = NULL)
names(results) <- c("feature", "p", "q")
for(feature in features){
feature_results <- computeParametersAndLogLikelihoodRatioPerFeature(dat[feature,],
men_ind,
women_ind)
}
write.csv(results, "~/MastersDegree/Thesis/DAPHNA_JOEL/Results/EM_Results/data_GSP_thickness_results.csv")
}
debug(main)
main("data_GSP_thickness.csv")
source('~/mastersdegree/Thesis/DAPHNA_JOEL/Mixture_models/testing_em_and_llk_on_real_data_v10.r', echo=TRUE)
main <- function(data_file){
path_to_file <- file.path("~/mastersdegree/Thesis/DAPHNA_JOEL/Data", data_file)
dat <- read.csv(path_to_file)
features <- names(dat)
men_ind <- dat[dat$Gender == 1,]
women_ind <- dat[dat$Gender == 2,]
n <- length(men_ind)
m <- length(women_ind)
results <- data.frame(feature = NULL, p = NULL, q = NULL, llk_ratio = NULL)
names(results) <- c("feature", "p", "q")
for(feature in features){
feature_results <- computeParametersAndLogLikelihoodRatioPerFeature(dat[feature,],
men_ind,
women_ind)
}
write.csv(results, "~/MastersDegree/Thesis/DAPHNA_JOEL/Results/EM_Results/data_GSP_thickness_results.csv")
}
debug(main)
main("data_GSP_thickness.csv")
main <- function(data_file){
path_to_file <- file.path("~/mastersdegree/Thesis/DAPHNA_JOEL/Data", data_file)
dat <- read.csv(path_to_file)
features <- names(dat)
men_ind <- dat[dat$Gender == 1,]
women_ind <- dat[dat$Gender == 2,]
n <- length(men_ind)
m <- length(women_ind)
results <- data.frame(feature = NULL, p = NULL, q = NULL, llk_ratio = NULL)
for(feature in features){
feature_results <- computeParametersAndLogLikelihoodRatioPerFeature(dat[feature,],
men_ind,
women_ind)
}
names(results) <- c("feature", "p", "q")
write.csv(results, "~/MastersDegree/Thesis/DAPHNA_JOEL/Results/EM_Results/data_GSP_thickness_results.csv")
}
debug(main)
debug(computeParametersAndLogLikelihoodRatioPerFeature)
main("data_GSP_thickness.csv")
debug(main)
debug(computeParametersAndLogLikelihoodRatioPerFeature)
main("data_GSP_thickness.csv")
feature
main <- function(data_file){
path_to_file <- file.path("~/mastersdegree/Thesis/DAPHNA_JOEL/Data", data_file)
dat <- read.csv(path_to_file)
features <- names(dat)
men_ind <- dat[dat$Gender == 1,]
women_ind <- dat[dat$Gender == 2,]
n <- length(men_ind)
m <- length(women_ind)
results <- data.frame(feature = NULL, p = NULL, q = NULL, llk_ratio = NULL)
for(feature in features){
data <- dat[feature,]
feature_results <- computeParametersAndLogLikelihoodRatioPerFeature(data,
men_ind,
women_ind)
}
names(results) <- c("feature", "p", "q")
write.csv(results, "~/MastersDegree/Thesis/DAPHNA_JOEL/Results/EM_Results/data_GSP_thickness_results.csv")
}
main <- function(data_file){
path_to_file <- file.path("~/mastersdegree/Thesis/DAPHNA_JOEL/Data", data_file)
dat <- read.csv(path_to_file)
features <- names(dat)
men_ind <- dat[dat$Gender == 1,]
women_ind <- dat[dat$Gender == 2,]
n <- length(men_ind)
m <- length(women_ind)
results <- data.frame(feature = NULL, p = NULL, q = NULL, llk_ratio = NULL)
for(feature in features){
data <- dat$feature
feature_results <- computeParametersAndLogLikelihoodRatioPerFeature(data,
men_ind,
women_ind)
}
names(results) <- c("feature", "p", "q")
write.csv(results, "~/MastersDegree/Thesis/DAPHNA_JOEL/Results/EM_Results/data_GSP_thickness_results.csv")
}
debug(main)
debug(computeParametersAndLogLikelihoodRatioPerFeature)
main("data_GSP_thickness.csv")
dat
feature
dat$feature
dat[,feature]
main <- function(data_file){
path_to_file <- file.path("~/mastersdegree/Thesis/DAPHNA_JOEL/Data", data_file)
dat <- read.csv(path_to_file)
features <- names(dat)
men_ind <- dat[dat$Gender == 1,]
women_ind <- dat[dat$Gender == 2,]
n <- length(men_ind)
m <- length(women_ind)
results <- data.frame(feature = NULL, p = NULL, q = NULL, llk_ratio = NULL)
for(feature in features[-1]){
data <- dat[,feature]
feature_results <- computeParametersAndLogLikelihoodRatioPerFeature(data,
men_ind,
women_ind)
}
names(results) <- c("feature", "p", "q")
write.csv(results, "~/MastersDegree/Thesis/DAPHNA_JOEL/Results/EM_Results/data_GSP_thickness_results.csv")
}
undebug(main)
debug(computeParametersAndLogLikelihoodRatioPerFeature)
main("data_GSP_thickness.csv")
debug(computeParametersAndLogLikelihoodRatioPerFeature)
main("data_GSP_thickness.csv")
undebug(main)
feature
men_ind
